// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newLoan(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get addiotionalPositionSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get closePrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get closeTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FfrAdjust extends ethereum.Event {
  get params(): FfrAdjust__Params {
    return new FfrAdjust__Params(this);
  }
}

export class FfrAdjust__Params {
  _event: FfrAdjust;

  constructor(event: FfrAdjust) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class NewPosition extends ethereum.Event {
  get params(): NewPosition__Params {
    return new NewPosition__Params(this);
  }
}

export class NewPosition__Params {
  _event: NewPosition;

  constructor(event: NewPosition) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amm(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get side(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OpenPosition extends ethereum.Event {
  get params(): OpenPosition__Params {
    return new OpenPosition__Params(this);
  }
}

export class OpenPosition__Params {
  _event: OpenPosition;

  constructor(event: OpenPosition) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get loanAmt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get positionSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get lastFundingRate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PayInterest extends ethereum.Event {
  get params(): PayInterest__Params {
    return new PayInterest__Params(this);
  }
}

export class PayInterest__Params {
  _event: PayInterest;

  constructor(event: PayInterest) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountToPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemoveCollateral extends ethereum.Event {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this);
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity;

  constructor(event: RemoveLiquidity) {
    this._event = event;
  }

  get tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get positionSizeRemoved(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountOwed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get usdcReturned(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Exchange__closeOutPositionResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Exchange__decodeTradeIdResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Exchange__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    return map;
  }

  getCollateral(): BigInt {
    return this.value0;
  }

  getLoanedAmount(): BigInt {
    return this.value1;
  }

  getSide(): BigInt {
    return this.value2;
  }

  getPositionSize(): BigInt {
    return this.value3;
  }

  getEntryPrice(): BigInt {
    return this.value4;
  }

  getTimeStamp(): BigInt {
    return this.value5;
  }

  getLastFundingRate(): BigInt {
    return this.value6;
  }

  getAmm(): Address {
    return this.value7;
  }

  getTrader(): Address {
    return this.value8;
  }
}

export class Exchange extends ethereum.SmartContract {
  static bind(address: Address): Exchange {
    return new Exchange("Exchange", address);
  }

  addAmm(_amm: Address): BigInt {
    let result = super.call("addAmm", "addAmm(address):(uint256)", [
      ethereum.Value.fromAddress(_amm)
    ]);

    return result[0].toBigInt();
  }

  try_addAmm(_amm: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("addAmm", "addAmm(address):(uint256)", [
      ethereum.Value.fromAddress(_amm)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addCollateral(_tradeId: Bytes, _collateral: BigInt): boolean {
    let result = super.call(
      "addCollateral",
      "addCollateral(bytes,uint256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromUnsignedBigInt(_collateral)
      ]
    );

    return result[0].toBoolean();
  }

  try_addCollateral(
    _tradeId: Bytes,
    _collateral: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addCollateral",
      "addCollateral(bytes,uint256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromUnsignedBigInt(_collateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addLiquidityToPosition(
    _tradeId: Bytes,
    _leverage: BigInt,
    _addedCollateral: BigInt
  ): boolean {
    let result = super.call(
      "addLiquidityToPosition",
      "addLiquidityToPosition(bytes,uint256,uint256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromUnsignedBigInt(_leverage),
        ethereum.Value.fromUnsignedBigInt(_addedCollateral)
      ]
    );

    return result[0].toBoolean();
  }

  try_addLiquidityToPosition(
    _tradeId: Bytes,
    _leverage: BigInt,
    _addedCollateral: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addLiquidityToPosition",
      "addLiquidityToPosition(bytes,uint256,uint256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromUnsignedBigInt(_leverage),
        ethereum.Value.fromUnsignedBigInt(_addedCollateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableBalance(param0: Address): BigInt {
    let result = super.call(
      "availableBalance",
      "availableBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_availableBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableBalance",
      "availableBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closeOutPosition(_tradeId: Bytes): Exchange__closeOutPositionResult {
    let result = super.call(
      "closeOutPosition",
      "closeOutPosition(bytes):(bool,int256,uint256)",
      [ethereum.Value.fromBytes(_tradeId)]
    );

    return new Exchange__closeOutPositionResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_closeOutPosition(
    _tradeId: Bytes
  ): ethereum.CallResult<Exchange__closeOutPositionResult> {
    let result = super.tryCall(
      "closeOutPosition",
      "closeOutPosition(bytes):(bool,int256,uint256)",
      [ethereum.Value.fromBytes(_tradeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__closeOutPositionResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decodeTradeId(encodedData: Bytes): Exchange__decodeTradeIdResult {
    let result = super.call(
      "decodeTradeId",
      "decodeTradeId(bytes):(address,address,uint256,int256)",
      [ethereum.Value.fromBytes(encodedData)]
    );

    return new Exchange__decodeTradeIdResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_decodeTradeId(
    encodedData: Bytes
  ): ethereum.CallResult<Exchange__decodeTradeIdResult> {
    let result = super.tryCall(
      "decodeTradeId",
      "decodeTradeId(bytes):(address,address,uint256,int256)",
      [ethereum.Value.fromBytes(encodedData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__decodeTradeIdResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  exchangeViewer(): Address {
    let result = super.call("exchangeViewer", "exchangeViewer():(address)", []);

    return result[0].toAddress();
  }

  try_exchangeViewer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangeViewer",
      "exchangeViewer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTradeIdList(): Array<Bytes> {
    let result = super.call("getTradeIdList", "getTradeIdList():(bytes[])", []);

    return result[0].toBytesArray();
  }

  try_getTradeIdList(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getTradeIdList",
      "getTradeIdList():(bytes[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getTradeIds(_user: Address): Array<Bytes> {
    let result = super.call("getTradeIds", "getTradeIds(address):(bytes[])", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBytesArray();
  }

  try_getTradeIds(_user: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getTradeIds",
      "getTradeIds(address):(bytes[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  isActive(param0: Bytes): boolean {
    let result = super.call("isActive", "isActive(bytes):(bool)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(bytes):(bool)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAmm(param0: Address): boolean {
    let result = super.call("isAmm", "isAmm(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAmm(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAmm", "isAmm(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanPool(): Address {
    let result = super.call("loanPool", "loanPool():(address)", []);

    return result[0].toAddress();
  }

  try_loanPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("loanPool", "loanPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  openPosition(
    _amm: Address,
    _collateral: BigInt,
    _leverage: BigInt,
    _side: BigInt
  ): boolean {
    let result = super.call(
      "openPosition",
      "openPosition(address,uint256,uint256,int256):(bool)",
      [
        ethereum.Value.fromAddress(_amm),
        ethereum.Value.fromUnsignedBigInt(_collateral),
        ethereum.Value.fromUnsignedBigInt(_leverage),
        ethereum.Value.fromSignedBigInt(_side)
      ]
    );

    return result[0].toBoolean();
  }

  try_openPosition(
    _amm: Address,
    _collateral: BigInt,
    _leverage: BigInt,
    _side: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "openPosition",
      "openPosition(address,uint256,uint256,int256):(bool)",
      [
        ethereum.Value.fromAddress(_amm),
        ethereum.Value.fromUnsignedBigInt(_collateral),
        ethereum.Value.fromUnsignedBigInt(_leverage),
        ethereum.Value.fromSignedBigInt(_side)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  payInterestPayments(_tradeId: Bytes, _amm: Address): boolean {
    let result = super.call(
      "payInterestPayments",
      "payInterestPayments(bytes,address):(bool)",
      [ethereum.Value.fromBytes(_tradeId), ethereum.Value.fromAddress(_amm)]
    );

    return result[0].toBoolean();
  }

  try_payInterestPayments(
    _tradeId: Bytes,
    _amm: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "payInterestPayments",
      "payInterestPayments(bytes,address):(bool)",
      [ethereum.Value.fromBytes(_tradeId), ethereum.Value.fromAddress(_amm)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolAvailableUsdc(param0: Address): BigInt {
    let result = super.call(
      "poolAvailableUsdc",
      "poolAvailableUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_poolAvailableUsdc(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolAvailableUsdc",
      "poolAvailableUsdc(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolFFRFund(param0: Address): BigInt {
    let result = super.call("poolFFRFund", "poolFFRFund(address):(int256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_poolFFRFund(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolFFRFund", "poolFFRFund(address):(int256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolOutstandingLoans(param0: Address): BigInt {
    let result = super.call(
      "poolOutstandingLoans",
      "poolOutstandingLoans(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_poolOutstandingLoans(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolOutstandingLoans",
      "poolOutstandingLoans(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolTotalUsdcSupply(param0: Address): BigInt {
    let result = super.call(
      "poolTotalUsdcSupply",
      "poolTotalUsdcSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_poolTotalUsdcSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolTotalUsdcSupply",
      "poolTotalUsdcSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positions(param0: Bytes): Exchange__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes):(uint256,uint256,int256,int256,uint256,uint256,uint256,address,address)",
      [ethereum.Value.fromBytes(param0)]
    );

    return new Exchange__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toAddress()
    );
  }

  try_positions(param0: Bytes): ethereum.CallResult<Exchange__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes):(uint256,uint256,int256,int256,uint256,uint256,uint256,address,address)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toAddress()
      )
    );
  }

  removeCollateral(_tradeId: Bytes, _collateralToRemove: BigInt): boolean {
    let result = super.call(
      "removeCollateral",
      "removeCollateral(bytes,uint256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromUnsignedBigInt(_collateralToRemove)
      ]
    );

    return result[0].toBoolean();
  }

  try_removeCollateral(
    _tradeId: Bytes,
    _collateralToRemove: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeCollateral",
      "removeCollateral(bytes,uint256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromUnsignedBigInt(_collateralToRemove)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeLiquidityFromPosition(_tradeId: Bytes, _positionSize: BigInt): boolean {
    let result = super.call(
      "removeLiquidityFromPosition",
      "removeLiquidityFromPosition(bytes,int256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromSignedBigInt(_positionSize)
      ]
    );

    return result[0].toBoolean();
  }

  try_removeLiquidityFromPosition(
    _tradeId: Bytes,
    _positionSize: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeLiquidityFromPosition",
      "removeLiquidityFromPosition(bytes,int256):(bool)",
      [
        ethereum.Value.fromBytes(_tradeId),
        ethereum.Value.fromSignedBigInt(_positionSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  theseusDao(): Address {
    let result = super.call("theseusDao", "theseusDao():(address)", []);

    return result[0].toAddress();
  }

  try_theseusDao(): ethereum.CallResult<Address> {
    let result = super.tryCall("theseusDao", "theseusDao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalTradeCollateral(param0: Address): BigInt {
    let result = super.call(
      "totalTradeCollateral",
      "totalTradeCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalTradeCollateral(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTradeCollateral",
      "totalTradeCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeBalance(param0: Bytes): BigInt {
    let result = super.call("tradeBalance", "tradeBalance(bytes):(uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tradeBalance(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradeBalance",
      "tradeBalance(bytes):(uint256)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeCollateral(param0: Bytes): BigInt {
    let result = super.call(
      "tradeCollateral",
      "tradeCollateral(bytes):(uint256)",
      [ethereum.Value.fromBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_tradeCollateral(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradeCollateral",
      "tradeCollateral(bytes):(uint256)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeIdList(param0: BigInt): Bytes {
    let result = super.call("tradeIdList", "tradeIdList(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_tradeIdList(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("tradeIdList", "tradeIdList(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tradeIds(param0: Address, param1: BigInt): Bytes {
    let result = super.call("tradeIds", "tradeIds(address,uint256):(bytes)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBytes();
  }

  try_tradeIds(param0: Address, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tradeIds",
      "tradeIds(address,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _staking(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAmmCall extends ethereum.Call {
  get inputs(): AddAmmCall__Inputs {
    return new AddAmmCall__Inputs(this);
  }

  get outputs(): AddAmmCall__Outputs {
    return new AddAmmCall__Outputs(this);
  }
}

export class AddAmmCall__Inputs {
  _call: AddAmmCall;

  constructor(call: AddAmmCall) {
    this._call = call;
  }

  get _amm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAmmCall__Outputs {
  _call: AddAmmCall;

  constructor(call: AddAmmCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddAvailableBalanceCall extends ethereum.Call {
  get inputs(): AddAvailableBalanceCall__Inputs {
    return new AddAvailableBalanceCall__Inputs(this);
  }

  get outputs(): AddAvailableBalanceCall__Outputs {
    return new AddAvailableBalanceCall__Outputs(this);
  }
}

export class AddAvailableBalanceCall__Inputs {
  _call: AddAvailableBalanceCall;

  constructor(call: AddAvailableBalanceCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddAvailableBalanceCall__Outputs {
  _call: AddAvailableBalanceCall;

  constructor(call: AddAvailableBalanceCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddLiquidityToPositionCall extends ethereum.Call {
  get inputs(): AddLiquidityToPositionCall__Inputs {
    return new AddLiquidityToPositionCall__Inputs(this);
  }

  get outputs(): AddLiquidityToPositionCall__Outputs {
    return new AddLiquidityToPositionCall__Outputs(this);
  }
}

export class AddLiquidityToPositionCall__Inputs {
  _call: AddLiquidityToPositionCall;

  constructor(call: AddLiquidityToPositionCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _leverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _addedCollateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddLiquidityToPositionCall__Outputs {
  _call: AddLiquidityToPositionCall;

  constructor(call: AddLiquidityToPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddPoolAvailableUsdcCall extends ethereum.Call {
  get inputs(): AddPoolAvailableUsdcCall__Inputs {
    return new AddPoolAvailableUsdcCall__Inputs(this);
  }

  get outputs(): AddPoolAvailableUsdcCall__Outputs {
    return new AddPoolAvailableUsdcCall__Outputs(this);
  }
}

export class AddPoolAvailableUsdcCall__Inputs {
  _call: AddPoolAvailableUsdcCall;

  constructor(call: AddPoolAvailableUsdcCall) {
    this._call = call;
  }

  get _ammPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddPoolAvailableUsdcCall__Outputs {
  _call: AddPoolAvailableUsdcCall;

  constructor(call: AddPoolAvailableUsdcCall) {
    this._call = call;
  }
}

export class AddPoolOutstandingLoansCall extends ethereum.Call {
  get inputs(): AddPoolOutstandingLoansCall__Inputs {
    return new AddPoolOutstandingLoansCall__Inputs(this);
  }

  get outputs(): AddPoolOutstandingLoansCall__Outputs {
    return new AddPoolOutstandingLoansCall__Outputs(this);
  }
}

export class AddPoolOutstandingLoansCall__Inputs {
  _call: AddPoolOutstandingLoansCall;

  constructor(call: AddPoolOutstandingLoansCall) {
    this._call = call;
  }

  get _ammPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddPoolOutstandingLoansCall__Outputs {
  _call: AddPoolOutstandingLoansCall;

  constructor(call: AddPoolOutstandingLoansCall) {
    this._call = call;
  }
}

export class AddPoolTotalUsdcSupplyCall extends ethereum.Call {
  get inputs(): AddPoolTotalUsdcSupplyCall__Inputs {
    return new AddPoolTotalUsdcSupplyCall__Inputs(this);
  }

  get outputs(): AddPoolTotalUsdcSupplyCall__Outputs {
    return new AddPoolTotalUsdcSupplyCall__Outputs(this);
  }
}

export class AddPoolTotalUsdcSupplyCall__Inputs {
  _call: AddPoolTotalUsdcSupplyCall;

  constructor(call: AddPoolTotalUsdcSupplyCall) {
    this._call = call;
  }

  get _ammPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddPoolTotalUsdcSupplyCall__Outputs {
  _call: AddPoolTotalUsdcSupplyCall;

  constructor(call: AddPoolTotalUsdcSupplyCall) {
    this._call = call;
  }
}

export class CloseOutPositionCall extends ethereum.Call {
  get inputs(): CloseOutPositionCall__Inputs {
    return new CloseOutPositionCall__Inputs(this);
  }

  get outputs(): CloseOutPositionCall__Outputs {
    return new CloseOutPositionCall__Outputs(this);
  }
}

export class CloseOutPositionCall__Inputs {
  _call: CloseOutPositionCall;

  constructor(call: CloseOutPositionCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseOutPositionCall__Outputs {
  _call: CloseOutPositionCall;

  constructor(call: CloseOutPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class FreezeStakingCall extends ethereum.Call {
  get inputs(): FreezeStakingCall__Inputs {
    return new FreezeStakingCall__Inputs(this);
  }

  get outputs(): FreezeStakingCall__Outputs {
    return new FreezeStakingCall__Outputs(this);
  }
}

export class FreezeStakingCall__Inputs {
  _call: FreezeStakingCall;

  constructor(call: FreezeStakingCall) {
    this._call = call;
  }

  get _amm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FreezeStakingCall__Outputs {
  _call: FreezeStakingCall;

  constructor(call: FreezeStakingCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get _amm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _leverage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _side(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PayInterestPaymentsCall extends ethereum.Call {
  get inputs(): PayInterestPaymentsCall__Inputs {
    return new PayInterestPaymentsCall__Inputs(this);
  }

  get outputs(): PayInterestPaymentsCall__Outputs {
    return new PayInterestPaymentsCall__Outputs(this);
  }
}

export class PayInterestPaymentsCall__Inputs {
  _call: PayInterestPaymentsCall;

  constructor(call: PayInterestPaymentsCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amm(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PayInterestPaymentsCall__Outputs {
  _call: PayInterestPaymentsCall;

  constructor(call: PayInterestPaymentsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RegisterLoanPoolCall extends ethereum.Call {
  get inputs(): RegisterLoanPoolCall__Inputs {
    return new RegisterLoanPoolCall__Inputs(this);
  }

  get outputs(): RegisterLoanPoolCall__Outputs {
    return new RegisterLoanPoolCall__Outputs(this);
  }
}

export class RegisterLoanPoolCall__Inputs {
  _call: RegisterLoanPoolCall;

  constructor(call: RegisterLoanPoolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterLoanPoolCall__Outputs {
  _call: RegisterLoanPoolCall;

  constructor(call: RegisterLoanPoolCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _collateralToRemove(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveLiquidityFromPositionCall extends ethereum.Call {
  get inputs(): RemoveLiquidityFromPositionCall__Inputs {
    return new RemoveLiquidityFromPositionCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityFromPositionCall__Outputs {
    return new RemoveLiquidityFromPositionCall__Outputs(this);
  }
}

export class RemoveLiquidityFromPositionCall__Inputs {
  _call: RemoveLiquidityFromPositionCall;

  constructor(call: RemoveLiquidityFromPositionCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _positionSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityFromPositionCall__Outputs {
  _call: RemoveLiquidityFromPositionCall;

  constructor(call: RemoveLiquidityFromPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetExchangeViewerCall extends ethereum.Call {
  get inputs(): SetExchangeViewerCall__Inputs {
    return new SetExchangeViewerCall__Inputs(this);
  }

  get outputs(): SetExchangeViewerCall__Outputs {
    return new SetExchangeViewerCall__Outputs(this);
  }
}

export class SetExchangeViewerCall__Inputs {
  _call: SetExchangeViewerCall;

  constructor(call: SetExchangeViewerCall) {
    this._call = call;
  }

  get _exchangeViewer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExchangeViewerCall__Outputs {
  _call: SetExchangeViewerCall;

  constructor(call: SetExchangeViewerCall) {
    this._call = call;
  }
}

export class SubAvailableBalanceCall extends ethereum.Call {
  get inputs(): SubAvailableBalanceCall__Inputs {
    return new SubAvailableBalanceCall__Inputs(this);
  }

  get outputs(): SubAvailableBalanceCall__Outputs {
    return new SubAvailableBalanceCall__Outputs(this);
  }
}

export class SubAvailableBalanceCall__Inputs {
  _call: SubAvailableBalanceCall;

  constructor(call: SubAvailableBalanceCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubAvailableBalanceCall__Outputs {
  _call: SubAvailableBalanceCall;

  constructor(call: SubAvailableBalanceCall) {
    this._call = call;
  }
}

export class SubPoolAvailableUsdcCall extends ethereum.Call {
  get inputs(): SubPoolAvailableUsdcCall__Inputs {
    return new SubPoolAvailableUsdcCall__Inputs(this);
  }

  get outputs(): SubPoolAvailableUsdcCall__Outputs {
    return new SubPoolAvailableUsdcCall__Outputs(this);
  }
}

export class SubPoolAvailableUsdcCall__Inputs {
  _call: SubPoolAvailableUsdcCall;

  constructor(call: SubPoolAvailableUsdcCall) {
    this._call = call;
  }

  get _ammPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubPoolAvailableUsdcCall__Outputs {
  _call: SubPoolAvailableUsdcCall;

  constructor(call: SubPoolAvailableUsdcCall) {
    this._call = call;
  }
}

export class SubPoolOutstandingLoansCall extends ethereum.Call {
  get inputs(): SubPoolOutstandingLoansCall__Inputs {
    return new SubPoolOutstandingLoansCall__Inputs(this);
  }

  get outputs(): SubPoolOutstandingLoansCall__Outputs {
    return new SubPoolOutstandingLoansCall__Outputs(this);
  }
}

export class SubPoolOutstandingLoansCall__Inputs {
  _call: SubPoolOutstandingLoansCall;

  constructor(call: SubPoolOutstandingLoansCall) {
    this._call = call;
  }

  get _ammPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubPoolOutstandingLoansCall__Outputs {
  _call: SubPoolOutstandingLoansCall;

  constructor(call: SubPoolOutstandingLoansCall) {
    this._call = call;
  }
}

export class SubPoolTotalUsdcSupplyCall extends ethereum.Call {
  get inputs(): SubPoolTotalUsdcSupplyCall__Inputs {
    return new SubPoolTotalUsdcSupplyCall__Inputs(this);
  }

  get outputs(): SubPoolTotalUsdcSupplyCall__Outputs {
    return new SubPoolTotalUsdcSupplyCall__Outputs(this);
  }
}

export class SubPoolTotalUsdcSupplyCall__Inputs {
  _call: SubPoolTotalUsdcSupplyCall;

  constructor(call: SubPoolTotalUsdcSupplyCall) {
    this._call = call;
  }

  get _ammPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubPoolTotalUsdcSupplyCall__Outputs {
  _call: SubPoolTotalUsdcSupplyCall;

  constructor(call: SubPoolTotalUsdcSupplyCall) {
    this._call = call;
  }
}

export class UnFreezeStakingCall extends ethereum.Call {
  get inputs(): UnFreezeStakingCall__Inputs {
    return new UnFreezeStakingCall__Inputs(this);
  }

  get outputs(): UnFreezeStakingCall__Outputs {
    return new UnFreezeStakingCall__Outputs(this);
  }
}

export class UnFreezeStakingCall__Inputs {
  _call: UnFreezeStakingCall;

  constructor(call: UnFreezeStakingCall) {
    this._call = call;
  }

  get _amm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnFreezeStakingCall__Outputs {
  _call: UnFreezeStakingCall;

  constructor(call: UnFreezeStakingCall) {
    this._call = call;
  }
}

export class UpdateTheseusCall extends ethereum.Call {
  get inputs(): UpdateTheseusCall__Inputs {
    return new UpdateTheseusCall__Inputs(this);
  }

  get outputs(): UpdateTheseusCall__Outputs {
    return new UpdateTheseusCall__Outputs(this);
  }
}

export class UpdateTheseusCall__Inputs {
  _call: UpdateTheseusCall;

  constructor(call: UpdateTheseusCall) {
    this._call = call;
  }

  get _theseusDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTheseusCall__Outputs {
  _call: UpdateTheseusCall;

  constructor(call: UpdateTheseusCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
