// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString())
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balances(): Bytes {
    let value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set balances(value: Bytes) {
    this.set("balances", Value.fromBytes(value));
  }

  get stakes(): Array<Bytes> | null {
    let value = this.get("stakes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  get trades(): Array<Bytes> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }
}

export class Trade extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Trade must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Trade", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Trade | null {
    return changetype<Trade | null>(
      store.get_in_block("Trade", id.toHexString())
    );
  }

  static load(id: Bytes): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tradeId(): Bytes {
    let value = this.get("tradeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tradeId(value: Bytes) {
    this.set("tradeId", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get ammPool(): Bytes {
    let value = this.get("ammPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ammPool(value: Bytes) {
    this.set("ammPool", Value.fromBytes(value));
  }

  get vamm(): Bytes {
    let value = this.get("vamm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vamm(value: Bytes) {
    this.set("vamm", Value.fromBytes(value));
  }

  get tradeBalance(): Bytes {
    let value = this.get("tradeBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tradeBalance(value: Bytes) {
    this.set("tradeBalance", Value.fromBytes(value));
  }

  get created(): BigInt {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set created(value: BigInt) {
    this.set("created", Value.fromBigInt(value));
  }

  get startingCost(): BigInt {
    let value = this.get("startingCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startingCost(value: BigInt) {
    this.set("startingCost", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get liquidated(): boolean {
    let value = this.get("liquidated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set liquidated(value: boolean) {
    this.set("liquidated", Value.fromBoolean(value));
  }
}

export class TradeBalance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TradeBalance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeBalance", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TradeBalance | null {
    return changetype<TradeBalance | null>(
      store.get_in_block("TradeBalance", id.toHexString())
    );
  }

  static load(id: Bytes): TradeBalance | null {
    return changetype<TradeBalance | null>(
      store.get("TradeBalance", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tradeId(): Bytes {
    let value = this.get("tradeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tradeId(value: Bytes) {
    this.set("tradeId", Value.fromBytes(value));
  }

  get LastInterestPayed(): BigInt {
    let value = this.get("LastInterestPayed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set LastInterestPayed(value: BigInt) {
    this.set("LastInterestPayed", Value.fromBigInt(value));
  }

  get LastFFRPayed(): BigInt {
    let value = this.get("LastFFRPayed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set LastFFRPayed(value: BigInt) {
    this.set("LastFFRPayed", Value.fromBigInt(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get side(): BigInt {
    let value = this.get("side");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set side(value: BigInt) {
    this.set("side", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get leverage(): BigInt {
    let value = this.get("leverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set leverage(value: BigInt) {
    this.set("leverage", Value.fromBigInt(value));
  }

  get loanAmt(): BigInt {
    let value = this.get("loanAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set loanAmt(value: BigInt) {
    this.set("loanAmt", Value.fromBigInt(value));
  }

  get positionSize(): BigInt {
    let value = this.get("positionSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set positionSize(value: BigInt) {
    this.set("positionSize", Value.fromBigInt(value));
  }

  get entryPrice(): BigInt {
    let value = this.get("entryPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set entryPrice(value: BigInt) {
    this.set("entryPrice", Value.fromBigInt(value));
  }

  get exitPrice(): BigInt | null {
    let value = this.get("exitPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitPrice(value: BigInt | null) {
    if (!value) {
      this.unset("exitPrice");
    } else {
      this.set("exitPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get exitTime(): BigInt | null {
    let value = this.get("exitTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitTime(value: BigInt | null) {
    if (!value) {
      this.unset("exitTime");
    } else {
      this.set("exitTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get pnl(): BigInt {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pnl(value: BigInt) {
    this.set("pnl", Value.fromBigInt(value));
  }
}

export class LoanPool extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LoanPool must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanPool", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LoanPool | null {
    return changetype<LoanPool | null>(
      store.get_in_block("LoanPool", id.toHexString())
    );
  }

  static load(id: Bytes): LoanPool | null {
    return changetype<LoanPool | null>(store.get("LoanPool", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amm(): Bytes {
    let value = this.get("amm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set amm(value: Bytes) {
    this.set("amm", Value.fromBytes(value));
  }

  get ariadneDAO(): Bytes {
    let value = this.get("ariadneDAO");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ariadneDAO(value: Bytes) {
    this.set("ariadneDAO", Value.fromBytes(value));
  }

  get created(): BigInt {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set created(value: BigInt) {
    this.set("created", Value.fromBigInt(value));
  }

  get minLoan(): BigInt {
    let value = this.get("minLoan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minLoan(value: BigInt) {
    this.set("minLoan", Value.fromBigInt(value));
  }

  get maxLoan(): BigInt {
    let value = this.get("maxLoan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxLoan(value: BigInt) {
    this.set("maxLoan", Value.fromBigInt(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get interestPeriod(): BigInt {
    let value = this.get("interestPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestPeriod(value: BigInt) {
    this.set("interestPeriod", Value.fromBigInt(value));
  }

  get mmr(): BigInt {
    let value = this.get("mmr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mmr(value: BigInt) {
    this.set("mmr", Value.fromBigInt(value));
  }

  get minHoldingsReqPercentage(): BigInt {
    let value = this.get("minHoldingsReqPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minHoldingsReqPercentage(value: BigInt) {
    this.set("minHoldingsReqPercentage", Value.fromBigInt(value));
  }

  get tradingFee(): BigInt {
    let value = this.get("tradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradingFee(value: BigInt) {
    this.set("tradingFee", Value.fromBigInt(value));
  }

  get poolBalance(): Bytes | null {
    let value = this.get("poolBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolBalance(value: Bytes | null) {
    if (!value) {
      this.unset("poolBalance");
    } else {
      this.set("poolBalance", Value.fromBytes(<Bytes>value));
    }
  }

  get trades(): Array<Bytes> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  get debt(): Bytes | null {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set debt(value: Bytes | null) {
    if (!value) {
      this.unset("debt");
    } else {
      this.set("debt", Value.fromBytes(<Bytes>value));
    }
  }

  get poolToken(): Bytes | null {
    let value = this.get("poolToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolToken(value: Bytes | null) {
    if (!value) {
      this.unset("poolToken");
    } else {
      this.set("poolToken", Value.fromBytes(<Bytes>value));
    }
  }

  get loanPoolTheseus(): Bytes | null {
    let value = this.get("loanPoolTheseus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set loanPoolTheseus(value: Bytes | null) {
    if (!value) {
      this.unset("loanPoolTheseus");
    } else {
      this.set("loanPoolTheseus", Value.fromBytes(<Bytes>value));
    }
  }

  get stakes(): Array<Bytes> {
    let value = this.get("stakes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }
}

export class PoolBalance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PoolBalance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolBalance", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PoolBalance | null {
    return changetype<PoolBalance | null>(
      store.get_in_block("PoolBalance", id.toHexString())
    );
  }

  static load(id: Bytes): PoolBalance | null {
    return changetype<PoolBalance | null>(
      store.get("PoolBalance", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amm(): Bytes {
    let value = this.get("amm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set amm(value: Bytes) {
    this.set("amm", Value.fromBytes(value));
  }

  get totalUsdcSupply(): BigInt {
    let value = this.get("totalUsdcSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsdcSupply(value: BigInt) {
    this.set("totalUsdcSupply", Value.fromBigInt(value));
  }

  get availableUsdc(): BigInt {
    let value = this.get("availableUsdc");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableUsdc(value: BigInt) {
    this.set("availableUsdc", Value.fromBigInt(value));
  }

  get outstandingLoanUsdc(): BigInt {
    let value = this.get("outstandingLoanUsdc");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outstandingLoanUsdc(value: BigInt) {
    this.set("outstandingLoanUsdc", Value.fromBigInt(value));
  }

  get loanPool(): Bytes {
    let value = this.get("loanPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set loanPool(value: Bytes) {
    this.set("loanPool", Value.fromBytes(value));
  }
}

export class TheseusDAO extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TheseusDAO entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TheseusDAO must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TheseusDAO", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TheseusDAO | null {
    return changetype<TheseusDAO | null>(
      store.get_in_block("TheseusDAO", id.toHexString())
    );
  }

  static load(id: Bytes): TheseusDAO | null {
    return changetype<TheseusDAO | null>(
      store.get("TheseusDAO", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }

  get poolTokens(): Array<Bytes> {
    let value = this.get("poolTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set poolTokens(value: Array<Bytes>) {
    this.set("poolTokens", Value.fromBytesArray(value));
  }

  get currentId(): BigInt {
    let value = this.get("currentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentId(value: BigInt) {
    this.set("currentId", Value.fromBigInt(value));
  }

  get votingTime(): BigInt {
    let value = this.get("votingTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votingTime(value: BigInt) {
    this.set("votingTime", Value.fromBigInt(value));
  }

  get maxVotingPower(): BigInt {
    let value = this.get("maxVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxVotingPower(value: BigInt) {
    this.set("maxVotingPower", Value.fromBigInt(value));
  }

  get minVotingPower(): BigInt {
    let value = this.get("minVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minVotingPower(value: BigInt) {
    this.set("minVotingPower", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get votesNeededPercentage(): BigInt {
    let value = this.get("votesNeededPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votesNeededPercentage(value: BigInt) {
    this.set("votesNeededPercentage", Value.fromBigInt(value));
  }

  get insuranceFundMin(): BigInt {
    let value = this.get("insuranceFundMin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundMin(value: BigInt) {
    this.set("insuranceFundMin", Value.fromBigInt(value));
  }

  get loanPoolTheseus(): Bytes {
    let value = this.get("loanPoolTheseus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set loanPoolTheseus(value: Bytes) {
    this.set("loanPoolTheseus", Value.fromBytes(value));
  }

  get balances(): Array<Bytes> {
    let value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set balances(value: Array<Bytes>) {
    this.set("balances", Value.fromBytesArray(value));
  }

  get stakes(): Array<Bytes> {
    let value = this.get("stakes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }
}

export class LoanPoolTheseus extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanPoolTheseus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LoanPoolTheseus must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanPoolTheseus", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LoanPoolTheseus | null {
    return changetype<LoanPoolTheseus | null>(
      store.get_in_block("LoanPoolTheseus", id.toHexString())
    );
  }

  static load(id: Bytes): LoanPoolTheseus | null {
    return changetype<LoanPoolTheseus | null>(
      store.get("LoanPoolTheseus", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get minMMR(): BigInt | null {
    let value = this.get("minMMR");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minMMR(value: BigInt | null) {
    if (!value) {
      this.unset("minMMR");
    } else {
      this.set("minMMR", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxMMR(): BigInt | null {
    let value = this.get("maxMMR");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxMMR(value: BigInt | null) {
    if (!value) {
      this.unset("maxMMR");
    } else {
      this.set("maxMMR", Value.fromBigInt(<BigInt>value));
    }
  }

  get minInterestRate(): BigInt | null {
    let value = this.get("minInterestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minInterestRate(value: BigInt | null) {
    if (!value) {
      this.unset("minInterestRate");
    } else {
      this.set("minInterestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxInterestRate(): BigInt | null {
    let value = this.get("maxInterestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxInterestRate(value: BigInt | null) {
    if (!value) {
      this.unset("maxInterestRate");
    } else {
      this.set("maxInterestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get minTradingFee(): BigInt | null {
    let value = this.get("minTradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minTradingFee(value: BigInt | null) {
    if (!value) {
      this.unset("minTradingFee");
    } else {
      this.set("minTradingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxTradingFee(): BigInt | null {
    let value = this.get("maxTradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxTradingFee(value: BigInt | null) {
    if (!value) {
      this.unset("maxTradingFee");
    } else {
      this.set("maxTradingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get minLoan(): BigInt | null {
    let value = this.get("minLoan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minLoan(value: BigInt | null) {
    if (!value) {
      this.unset("minLoan");
    } else {
      this.set("minLoan", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxLoan(): BigInt | null {
    let value = this.get("maxLoan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxLoan(value: BigInt | null) {
    if (!value) {
      this.unset("maxLoan");
    } else {
      this.set("maxLoan", Value.fromBigInt(<BigInt>value));
    }
  }

  get minHoldingsReqPercentage(): BigInt | null {
    let value = this.get("minHoldingsReqPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minHoldingsReqPercentage(value: BigInt | null) {
    if (!value) {
      this.unset("minHoldingsReqPercentage");
    } else {
      this.set("minHoldingsReqPercentage", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxHoldingsReqPercentage(): BigInt | null {
    let value = this.get("maxHoldingsReqPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxHoldingsReqPercentage(value: BigInt | null) {
    if (!value) {
      this.unset("maxHoldingsReqPercentage");
    } else {
      this.set("maxHoldingsReqPercentage", Value.fromBigInt(<BigInt>value));
    }
  }

  get minInterestPeriod(): BigInt | null {
    let value = this.get("minInterestPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minInterestPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("minInterestPeriod");
    } else {
      this.set("minInterestPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxInterestPeriod(): BigInt | null {
    let value = this.get("maxInterestPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxInterestPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("maxInterestPeriod");
    } else {
      this.set("maxInterestPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get theseusDAO(): Bytes {
    let value = this.get("theseusDAO");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set theseusDAO(value: Bytes) {
    this.set("theseusDAO", Value.fromBytes(value));
  }
}

export class AriadneDAO extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AriadneDAO entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AriadneDAO must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AriadneDAO", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AriadneDAO | null {
    return changetype<AriadneDAO | null>(
      store.get_in_block("AriadneDAO", id.toHexString())
    );
  }

  static load(id: Bytes): AriadneDAO | null {
    return changetype<AriadneDAO | null>(
      store.get("AriadneDAO", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currentId(): BigInt {
    let value = this.get("currentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentId(value: BigInt) {
    this.set("currentId", Value.fromBigInt(value));
  }

  get ammPool(): Bytes {
    let value = this.get("ammPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ammPool(value: Bytes) {
    this.set("ammPool", Value.fromBytes(value));
  }

  get votingTime(): BigInt {
    let value = this.get("votingTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votingTime(value: BigInt) {
    this.set("votingTime", Value.fromBigInt(value));
  }

  get maxVotingPower(): BigInt {
    let value = this.get("maxVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxVotingPower(value: BigInt) {
    this.set("maxVotingPower", Value.fromBigInt(value));
  }

  get minVotingPower(): BigInt {
    let value = this.get("minVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minVotingPower(value: BigInt) {
    this.set("minVotingPower", Value.fromBigInt(value));
  }

  get votesNeededPercentage(): BigInt {
    let value = this.get("votesNeededPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votesNeededPercentage(value: BigInt) {
    this.set("votesNeededPercentage", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get poolToken(): Bytes {
    let value = this.get("poolToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolToken(value: Bytes) {
    this.set("poolToken", Value.fromBytes(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get_in_block("Proposal", id));
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dAO(): Bytes | null {
    let value = this.get("dAO");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dAO(value: Bytes | null) {
    if (!value) {
      this.unset("dAO");
    } else {
      this.set("dAO", Value.fromBytes(<Bytes>value));
    }
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get theseusDAO(): Bytes | null {
    let value = this.get("theseusDAO");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set theseusDAO(value: Bytes | null) {
    if (!value) {
      this.unset("theseusDAO");
    } else {
      this.set("theseusDAO", Value.fromBytes(<Bytes>value));
    }
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get result(): Bytes | null {
    let value = this.get("result");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set result(value: Bytes | null) {
    if (!value) {
      this.unset("result");
    } else {
      this.set("result", Value.fromBytes(<Bytes>value));
    }
  }

  get executor(): Bytes | null {
    let value = this.get("executor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executor(value: Bytes | null) {
    if (!value) {
      this.unset("executor");
    } else {
      this.set("executor", Value.fromBytes(<Bytes>value));
    }
  }

  get proposedAt(): BigInt {
    let value = this.get("proposedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proposedAt(value: BigInt) {
    this.set("proposedAt", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get isPassed(): boolean {
    let value = this.get("isPassed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPassed(value: boolean) {
    this.set("isPassed", Value.fromBoolean(value));
  }
}

export class Stake extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Stake must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Stake", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Stake | null {
    return changetype<Stake | null>(
      store.get_in_block("Stake", id.toHexString())
    );
  }

  static load(id: Bytes): Stake | null {
    return changetype<Stake | null>(store.get("Stake", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get tokensOwnedbByUser(): BigInt {
    let value = this.get("tokensOwnedbByUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensOwnedbByUser(value: BigInt) {
    this.set("tokensOwnedbByUser", Value.fromBigInt(value));
  }

  get ammPool(): Bytes | null {
    let value = this.get("ammPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ammPool(value: Bytes | null) {
    if (!value) {
      this.unset("ammPool");
    } else {
      this.set("ammPool", Value.fromBytes(<Bytes>value));
    }
  }

  get theseusDAO(): Bytes | null {
    let value = this.get("theseusDAO");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set theseusDAO(value: Bytes | null) {
    if (!value) {
      this.unset("theseusDAO");
    } else {
      this.set("theseusDAO", Value.fromBytes(<Bytes>value));
    }
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}

export class PoolToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PoolToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PoolToken | null {
    return changetype<PoolToken | null>(
      store.get_in_block("PoolToken", id.toHexString())
    );
  }

  static load(id: Bytes): PoolToken | null {
    return changetype<PoolToken | null>(
      store.get("PoolToken", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tokenBalance(): Array<Bytes> | null {
    let value = this.get("tokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  get ammPool(): Bytes {
    let value = this.get("ammPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ammPool(value: Bytes) {
    this.set("ammPool", Value.fromBytes(value));
  }

  get isFrozen(): boolean {
    let value = this.get("isFrozen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFrozen(value: boolean) {
    this.set("isFrozen", Value.fromBoolean(value));
  }
}

export class VAmm extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VAmm entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type VAmm must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VAmm", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): VAmm | null {
    return changetype<VAmm | null>(
      store.get_in_block("VAmm", id.toHexString())
    );
  }

  static load(id: Bytes): VAmm | null {
    return changetype<VAmm | null>(store.get("VAmm", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get loanPool(): Bytes {
    let value = this.get("loanPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set loanPool(value: Bytes) {
    this.set("loanPool", Value.fromBytes(value));
  }

  get ffrs(): Array<Bytes> {
    let value = this.get("ffrs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  get currentIndex(): BigInt {
    let value = this.get("currentIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentIndex(value: BigInt) {
    this.set("currentIndex", Value.fromBigInt(value));
  }

  get totalPositionSize(): BigInt {
    let value = this.get("totalPositionSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPositionSize(value: BigInt) {
    this.set("totalPositionSize", Value.fromBigInt(value));
  }

  get isFrozen(): boolean {
    let value = this.get("isFrozen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFrozen(value: boolean) {
    this.set("isFrozen", Value.fromBoolean(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get payload(): string {
    let value = this.get("payload");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set payload(value: string) {
    this.set("payload", Value.fromString(value));
  }

  get snapshots(): Array<Bytes> {
    let value = this.get("snapshots");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  get priceData(): Array<Bytes> {
    let value = this.get("priceData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }
}

export class Snapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Snapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Snapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Snapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Snapshot | null {
    return changetype<Snapshot | null>(
      store.get_in_block("Snapshot", id.toHexString())
    );
  }

  static load(id: Bytes): Snapshot | null {
    return changetype<Snapshot | null>(store.get("Snapshot", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get vamm(): Bytes {
    let value = this.get("vamm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vamm(value: Bytes) {
    this.set("vamm", Value.fromBytes(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get marketPrice(): BigDecimal {
    let value = this.get("marketPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set marketPrice(value: BigDecimal) {
    this.set("marketPrice", Value.fromBigDecimal(value));
  }

  get quoteAssetReserve(): BigInt {
    let value = this.get("quoteAssetReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set quoteAssetReserve(value: BigInt) {
    this.set("quoteAssetReserve", Value.fromBigInt(value));
  }

  get baseAssetReserve(): BigInt {
    let value = this.get("baseAssetReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseAssetReserve(value: BigInt) {
    this.set("baseAssetReserve", Value.fromBigInt(value));
  }

  get indexPrice(): BigInt {
    let value = this.get("indexPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set indexPrice(value: BigInt) {
    this.set("indexPrice", Value.fromBigInt(value));
  }

  get ffr(): BigInt {
    let value = this.get("ffr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ffr(value: BigInt) {
    this.set("ffr", Value.fromBigInt(value));
  }

  get totalPositionSize(): BigInt {
    let value = this.get("totalPositionSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPositionSize(value: BigInt) {
    this.set("totalPositionSize", Value.fromBigInt(value));
  }
}

export class FFR extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FFR entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FFR must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FFR", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FFR | null {
    return changetype<FFR | null>(store.get_in_block("FFR", id.toHexString()));
  }

  static load(id: Bytes): FFR | null {
    return changetype<FFR | null>(store.get("FFR", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }

  get vAmm(): Bytes {
    let value = this.get("vAmm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vAmm(value: Bytes) {
    this.set("vAmm", Value.fromBytes(value));
  }

  get ffr(): BigInt {
    let value = this.get("ffr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ffr(value: BigInt) {
    this.set("ffr", Value.fromBigInt(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class PriceData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PriceData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PriceData", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PriceData | null {
    return changetype<PriceData | null>(
      store.get_in_block("PriceData", id.toHexString())
    );
  }

  static load(id: Bytes): PriceData | null {
    return changetype<PriceData | null>(
      store.get("PriceData", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }

  get vAmm(): Bytes {
    let value = this.get("vAmm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vAmm(value: Bytes) {
    this.set("vAmm", Value.fromBytes(value));
  }

  get marketPrice(): BigDecimal {
    let value = this.get("marketPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set marketPrice(value: BigDecimal) {
    this.set("marketPrice", Value.fromBigDecimal(value));
  }

  get indexPrice(): BigInt {
    let value = this.get("indexPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set indexPrice(value: BigInt) {
    this.set("indexPrice", Value.fromBigInt(value));
  }
}

export class Balance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Balance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Balance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Balance", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Balance | null {
    return changetype<Balance | null>(
      store.get_in_block("Balance", id.toHexString())
    );
  }

  static load(id: Bytes): Balance | null {
    return changetype<Balance | null>(store.get("Balance", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get availableUsdc(): BigInt {
    let value = this.get("availableUsdc");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableUsdc(value: BigInt) {
    this.set("availableUsdc", Value.fromBigInt(value));
  }

  get totalCollateralUsdc(): BigInt {
    let value = this.get("totalCollateralUsdc");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateralUsdc(value: BigInt) {
    this.set("totalCollateralUsdc", Value.fromBigInt(value));
  }
}

export class Debt extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Debt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Debt must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Debt", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Debt | null {
    return changetype<Debt | null>(
      store.get_in_block("Debt", id.toHexString())
    );
  }

  static load(id: Bytes): Debt | null {
    return changetype<Debt | null>(store.get("Debt", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amountOwed(): BigInt {
    let value = this.get("amountOwed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOwed(value: BigInt) {
    this.set("amountOwed", Value.fromBigInt(value));
  }

  get loanPool(): Bytes {
    let value = this.get("loanPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set loanPool(value: Bytes) {
    this.set("loanPool", Value.fromBytes(value));
  }
}
