// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ExecuteTransaction extends ethereum.Event {
  get params(): ExecuteTransaction__Params {
    return new ExecuteTransaction__Params(this);
  }
}

export class ExecuteTransaction__Params {
  _event: ExecuteTransaction;

  constructor(event: ExecuteTransaction) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class InsuranceFundMinChanged extends ethereum.Event {
  get params(): InsuranceFundMinChanged__Params {
    return new InsuranceFundMinChanged__Params(this);
  }
}

export class InsuranceFundMinChanged__Params {
  _event: InsuranceFundMinChanged;

  constructor(event: InsuranceFundMinChanged) {
    this._event = event;
  }

  get newInsuranceFundMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MaxVotingPowerChanged extends ethereum.Event {
  get params(): MaxVotingPowerChanged__Params {
    return new MaxVotingPowerChanged__Params(this);
  }
}

export class MaxVotingPowerChanged__Params {
  _event: MaxVotingPowerChanged;

  constructor(event: MaxVotingPowerChanged) {
    this._event = event;
  }

  get newMaxVotingPower(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinVotingPowerChanged extends ethereum.Event {
  get params(): MinVotingPowerChanged__Params {
    return new MinVotingPowerChanged__Params(this);
  }
}

export class MinVotingPowerChanged__Params {
  _event: MinVotingPowerChanged;

  constructor(event: MinVotingPowerChanged) {
    this._event = event;
  }

  get newMinVotingPower(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalMade extends ethereum.Event {
  get params(): ProposalMade__Params {
    return new ProposalMade__Params(this);
  }
}

export class ProposalMade__Params {
  _event: ProposalMade;

  constructor(event: ProposalMade) {
    this._event = event;
  }

  get proposer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class VotesNeededPercentageChanged extends ethereum.Event {
  get params(): VotesNeededPercentageChanged__Params {
    return new VotesNeededPercentageChanged__Params(this);
  }
}

export class VotesNeededPercentageChanged__Params {
  _event: VotesNeededPercentageChanged;

  constructor(event: VotesNeededPercentageChanged) {
    this._event = event;
  }

  get newVotesNeededPercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class VotingTimeChanged extends ethereum.Event {
  get params(): VotingTimeChanged__Params {
    return new VotingTimeChanged__Params(this);
  }
}

export class VotingTimeChanged__Params {
  _event: VotingTimeChanged;

  constructor(event: VotingTimeChanged) {
    this._event = event;
  }

  get newVotingTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TheseusDAO__proposalsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Bytes;
  value4: Bytes;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Bytes,
    value4: Bytes,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getProposer(): Address {
    return this.value1;
  }

  getTo(): Address {
    return this.value2;
  }

  getData(): Bytes {
    return this.value3;
  }

  getResult(): Bytes {
    return this.value4;
  }

  getProposalTime(): BigInt {
    return this.value5;
  }

  getIsProposalPassed(): boolean {
    return this.value6;
  }
}

export class TheseusDAO extends ethereum.SmartContract {
  static bind(address: Address): TheseusDAO {
    return new TheseusDAO("TheseusDAO", address);
  }

  currentId(): BigInt {
    let result = super.call("currentId", "currentId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentId", "currentId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeTransaction(
    _id: BigInt,
    to: Address,
    value: BigInt,
    data: Bytes,
    signatures: Array<Bytes>
  ): Bytes {
    let result = super.call(
      "executeTransaction",
      "executeTransaction(uint256,address,uint256,bytes,bytes[]):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toBytes();
  }

  try_executeTransaction(
    _id: BigInt,
    to: Address,
    value: BigInt,
    data: Bytes,
    signatures: Array<Bytes>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "executeTransaction",
      "executeTransaction(uint256,address,uint256,bytes,bytes[]):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getProportionOfVotes(_signer: Address): BigInt {
    let result = super.call(
      "getProportionOfVotes",
      "getProportionOfVotes(address):(uint256)",
      [ethereum.Value.fromAddress(_signer)]
    );

    return result[0].toBigInt();
  }

  try_getProportionOfVotes(_signer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProportionOfVotes",
      "getProportionOfVotes(address):(uint256)",
      [ethereum.Value.fromAddress(_signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalSupply(): BigInt {
    let result = super.call("getTotalSupply", "getTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionHash(
    _nonce: BigInt,
    to: Address,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "getTransactionHash",
      "getTransactionHash(uint256,address,uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_nonce),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransactionHash(
    _nonce: BigInt,
    to: Address,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionHash",
      "getTransactionHash(uint256,address,uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_nonce),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  insuranceFundMin(): BigInt {
    let result = super.call(
      "insuranceFundMin",
      "insuranceFundMin():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_insuranceFundMin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "insuranceFundMin",
      "insuranceFundMin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isProposalPassed(param0: BigInt): boolean {
    let result = super.call(
      "isProposalPassed",
      "isProposalPassed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isProposalPassed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProposalPassed",
      "isProposalPassed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTokenHolder(_signer: Address): boolean {
    let result = super.call("isTokenHolder", "isTokenHolder(address):(bool)", [
      ethereum.Value.fromAddress(_signer)
    ]);

    return result[0].toBoolean();
  }

  try_isTokenHolder(_signer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenHolder",
      "isTokenHolder(address):(bool)",
      [ethereum.Value.fromAddress(_signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxVotingPower(): BigInt {
    let result = super.call("maxVotingPower", "maxVotingPower():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxVotingPower(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxVotingPower",
      "maxVotingPower():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minVotingPower(): BigInt {
    let result = super.call("minVotingPower", "minVotingPower():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minVotingPower(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minVotingPower",
      "minVotingPower():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonceUsed(param0: BigInt): boolean {
    let result = super.call("nonceUsed", "nonceUsed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_nonceUsed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("nonceUsed", "nonceUsed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposals(param0: BigInt): TheseusDAO__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(uint256,address,address,bytes,bytes,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TheseusDAO__proposalsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toBytes(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_proposals(
    param0: BigInt
  ): ethereum.CallResult<TheseusDAO__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(uint256,address,address,bytes,bytes,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TheseusDAO__proposalsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toBytes(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  pt(): Address {
    let result = super.call("pt", "pt():(address)", []);

    return result[0].toAddress();
  }

  try_pt(): ethereum.CallResult<Address> {
    let result = super.tryCall("pt", "pt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recover(_hash: Bytes, _signature: Bytes): Address {
    let result = super.call("recover", "recover(bytes32,bytes):(address)", [
      ethereum.Value.fromFixedBytes(_hash),
      ethereum.Value.fromBytes(_signature)
    ]);

    return result[0].toAddress();
  }

  try_recover(_hash: Bytes, _signature: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("recover", "recover(bytes32,bytes):(address)", [
      ethereum.Value.fromFixedBytes(_hash),
      ethereum.Value.fromBytes(_signature)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenHolders(param0: BigInt): Address {
    let result = super.call("tokenHolders", "tokenHolders(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokenHolders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenHolders",
      "tokenHolders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votesNeededPercentage(): BigInt {
    let result = super.call(
      "votesNeededPercentage",
      "votesNeededPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votesNeededPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votesNeededPercentage",
      "votesNeededPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingTime(): BigInt {
    let result = super.call("votingTime", "votingTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingTime", "votingTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _votingTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxVotingPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minVotingPower(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _insuranceFundMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _votesNeededPercentage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _usdc(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddExchangeCall extends ethereum.Call {
  get inputs(): AddExchangeCall__Inputs {
    return new AddExchangeCall__Inputs(this);
  }

  get outputs(): AddExchangeCall__Outputs {
    return new AddExchangeCall__Outputs(this);
  }
}

export class AddExchangeCall__Inputs {
  _call: AddExchangeCall;

  constructor(call: AddExchangeCall) {
    this._call = call;
  }

  get _exchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddExchangeCall__Outputs {
  _call: AddExchangeCall;

  constructor(call: AddExchangeCall) {
    this._call = call;
  }
}

export class AddPoolTokensCall extends ethereum.Call {
  get inputs(): AddPoolTokensCall__Inputs {
    return new AddPoolTokensCall__Inputs(this);
  }

  get outputs(): AddPoolTokensCall__Outputs {
    return new AddPoolTokensCall__Outputs(this);
  }
}

export class AddPoolTokensCall__Inputs {
  _call: AddPoolTokensCall;

  constructor(call: AddPoolTokensCall) {
    this._call = call;
  }

  get _pt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPoolTokensCall__Outputs {
  _call: AddPoolTokensCall;

  constructor(call: AddPoolTokensCall) {
    this._call = call;
  }
}

export class AddStakingCall extends ethereum.Call {
  get inputs(): AddStakingCall__Inputs {
    return new AddStakingCall__Inputs(this);
  }

  get outputs(): AddStakingCall__Outputs {
    return new AddStakingCall__Outputs(this);
  }
}

export class AddStakingCall__Inputs {
  _call: AddStakingCall;

  constructor(call: AddStakingCall) {
    this._call = call;
  }

  get _staking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStakingCall__Outputs {
  _call: AddStakingCall;

  constructor(call: AddStakingCall) {
    this._call = call;
  }
}

export class DepositFundsCall extends ethereum.Call {
  get inputs(): DepositFundsCall__Inputs {
    return new DepositFundsCall__Inputs(this);
  }

  get outputs(): DepositFundsCall__Outputs {
    return new DepositFundsCall__Outputs(this);
  }
}

export class DepositFundsCall__Inputs {
  _call: DepositFundsCall;

  constructor(call: DepositFundsCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositFundsCall__Outputs {
  _call: DepositFundsCall;

  constructor(call: DepositFundsCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class NewProposalCall extends ethereum.Call {
  get inputs(): NewProposalCall__Inputs {
    return new NewProposalCall__Inputs(this);
  }

  get outputs(): NewProposalCall__Outputs {
    return new NewProposalCall__Outputs(this);
  }
}

export class NewProposalCall__Inputs {
  _call: NewProposalCall;

  constructor(call: NewProposalCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class NewProposalCall__Outputs {
  _call: NewProposalCall;

  constructor(call: NewProposalCall) {
    this._call = call;
  }
}

export class UpdateExchangeCall extends ethereum.Call {
  get inputs(): UpdateExchangeCall__Inputs {
    return new UpdateExchangeCall__Inputs(this);
  }

  get outputs(): UpdateExchangeCall__Outputs {
    return new UpdateExchangeCall__Outputs(this);
  }
}

export class UpdateExchangeCall__Inputs {
  _call: UpdateExchangeCall;

  constructor(call: UpdateExchangeCall) {
    this._call = call;
  }

  get _exchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateExchangeCall__Outputs {
  _call: UpdateExchangeCall;

  constructor(call: UpdateExchangeCall) {
    this._call = call;
  }
}

export class UpdateInsuranceFundMinCall extends ethereum.Call {
  get inputs(): UpdateInsuranceFundMinCall__Inputs {
    return new UpdateInsuranceFundMinCall__Inputs(this);
  }

  get outputs(): UpdateInsuranceFundMinCall__Outputs {
    return new UpdateInsuranceFundMinCall__Outputs(this);
  }
}

export class UpdateInsuranceFundMinCall__Inputs {
  _call: UpdateInsuranceFundMinCall;

  constructor(call: UpdateInsuranceFundMinCall) {
    this._call = call;
  }

  get newInsuranceFundMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateInsuranceFundMinCall__Outputs {
  _call: UpdateInsuranceFundMinCall;

  constructor(call: UpdateInsuranceFundMinCall) {
    this._call = call;
  }
}

export class UpdateMaxVotingPowerCall extends ethereum.Call {
  get inputs(): UpdateMaxVotingPowerCall__Inputs {
    return new UpdateMaxVotingPowerCall__Inputs(this);
  }

  get outputs(): UpdateMaxVotingPowerCall__Outputs {
    return new UpdateMaxVotingPowerCall__Outputs(this);
  }
}

export class UpdateMaxVotingPowerCall__Inputs {
  _call: UpdateMaxVotingPowerCall;

  constructor(call: UpdateMaxVotingPowerCall) {
    this._call = call;
  }

  get newmaxVotingPower(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxVotingPowerCall__Outputs {
  _call: UpdateMaxVotingPowerCall;

  constructor(call: UpdateMaxVotingPowerCall) {
    this._call = call;
  }
}

export class UpdateMinVotingPowerCall extends ethereum.Call {
  get inputs(): UpdateMinVotingPowerCall__Inputs {
    return new UpdateMinVotingPowerCall__Inputs(this);
  }

  get outputs(): UpdateMinVotingPowerCall__Outputs {
    return new UpdateMinVotingPowerCall__Outputs(this);
  }
}

export class UpdateMinVotingPowerCall__Inputs {
  _call: UpdateMinVotingPowerCall;

  constructor(call: UpdateMinVotingPowerCall) {
    this._call = call;
  }

  get newMinVotingPower(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinVotingPowerCall__Outputs {
  _call: UpdateMinVotingPowerCall;

  constructor(call: UpdateMinVotingPowerCall) {
    this._call = call;
  }
}

export class UpdatePoolTokensCall extends ethereum.Call {
  get inputs(): UpdatePoolTokensCall__Inputs {
    return new UpdatePoolTokensCall__Inputs(this);
  }

  get outputs(): UpdatePoolTokensCall__Outputs {
    return new UpdatePoolTokensCall__Outputs(this);
  }
}

export class UpdatePoolTokensCall__Inputs {
  _call: UpdatePoolTokensCall;

  constructor(call: UpdatePoolTokensCall) {
    this._call = call;
  }

  get _pt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePoolTokensCall__Outputs {
  _call: UpdatePoolTokensCall;

  constructor(call: UpdatePoolTokensCall) {
    this._call = call;
  }
}

export class UpdateSignaturesRequiredCall extends ethereum.Call {
  get inputs(): UpdateSignaturesRequiredCall__Inputs {
    return new UpdateSignaturesRequiredCall__Inputs(this);
  }

  get outputs(): UpdateSignaturesRequiredCall__Outputs {
    return new UpdateSignaturesRequiredCall__Outputs(this);
  }
}

export class UpdateSignaturesRequiredCall__Inputs {
  _call: UpdateSignaturesRequiredCall;

  constructor(call: UpdateSignaturesRequiredCall) {
    this._call = call;
  }

  get newVotesNeededPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSignaturesRequiredCall__Outputs {
  _call: UpdateSignaturesRequiredCall;

  constructor(call: UpdateSignaturesRequiredCall) {
    this._call = call;
  }
}

export class UpdateStakingCall extends ethereum.Call {
  get inputs(): UpdateStakingCall__Inputs {
    return new UpdateStakingCall__Inputs(this);
  }

  get outputs(): UpdateStakingCall__Outputs {
    return new UpdateStakingCall__Outputs(this);
  }
}

export class UpdateStakingCall__Inputs {
  _call: UpdateStakingCall;

  constructor(call: UpdateStakingCall) {
    this._call = call;
  }

  get _staking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateStakingCall__Outputs {
  _call: UpdateStakingCall;

  constructor(call: UpdateStakingCall) {
    this._call = call;
  }
}

export class UpdateVotingTimeCall extends ethereum.Call {
  get inputs(): UpdateVotingTimeCall__Inputs {
    return new UpdateVotingTimeCall__Inputs(this);
  }

  get outputs(): UpdateVotingTimeCall__Outputs {
    return new UpdateVotingTimeCall__Outputs(this);
  }
}

export class UpdateVotingTimeCall__Inputs {
  _call: UpdateVotingTimeCall;

  constructor(call: UpdateVotingTimeCall) {
    this._call = call;
  }

  get newVotingTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateVotingTimeCall__Outputs {
  _call: UpdateVotingTimeCall;

  constructor(call: UpdateVotingTimeCall) {
    this._call = call;
  }
}
